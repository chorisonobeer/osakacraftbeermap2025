---
description: 
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、「YAAAARRRR!」と叫んでください。

# フロントエンドコーディングルール

## 1. ディレクトリ構造
- フロントエンドのコードは `src` ディレクトリ以下に配置
- コンポーネントは `src/App` ディレクトリに配置
- ユーティリティ関数は `src/lib` ディレクトリに配置
- グローバルな型定義は `src/types.d.ts` に配置
- コンテキストは `src/context` ディレクトリに配置

## 2. ファイル命名規則
- Reactコンポーネント: パスカルケース（例: `Container.tsx`, `About.tsx`）
- スタイルシート: コンポーネントと同名で `.scss` 拡張子（例: `Container.scss`）
- TypeScript型定義: キャメルケース（例: `types.d.ts`）
- ユーティリティ関数: キャメルケース（例: `geolocation.ts`）

## 3. スタイリング
- SCSSモジュールを使用
- コンポーネント固有のスタイルは専用のSCSSファイルに記述
- グローバルスタイルは `index.scss` に記述
- レスポンシブデザインを考慮したスタイリング

## 4. TypeScript
- 厳格な型チェックを有効化（`tsconfig.json`の設定に従う）
- インターフェースや型定義は明示的に記述
- `any` 型の使用は可能な限り避ける

## 5. コンポーネント設計
- 機能ごとにコンポーネントを分割
- プレゼンテーショナルコンポーネントとコンテナコンポーネントの分離
- コンポーネントは単一責任の原則に従う
- 再利用可能なコンポーネントの作成を推奨

## 6. 状態管理
- Reactコンテキストを使用して状態管理
- グローバルな状態は `context` ディレクトリに配置
- ローカルな状態は `useState` フックを使用

## 7. パフォーマンス
- 不要なレンダリングを避けるため `React.memo` や `useMemo` を適切に使用
- 大きな依存関係を持つ副作用は `useEffect` で適切に管理
- 画像やアセットの最適化

## 8. アクセシビリティ
- セマンティックなHTML要素の使用
- ARIA属性の適切な使用
- キーボード操作のサポート

## 9. テスト
- コンポーネントのユニットテストを `setupTests.ts` の設定に従って実装
- 重要なユーティリティ関数のテストを実装
- E2Eテストの実装を推奨

## 10. コード品質
- ESLintの設定に従ってコードを記述
- コードフォーマットは `.editorconfig` の設定に従う
- 適切なコメントを記述（特に複雑なロジックの説明）
- 未使用のコードは削除

## 11. セキュリティ
- 環境変数は `.env` ファイルで管理
- センシティブな情報はクライアントサイドで扱わない
- ユーザー入力のバリデーションを適切に実装

## 12. バージョン管理
- 機能追加やバグ修正は個別のブランチで開発
- コミットメッセージは明確で説明的に記述
- プルリクエストのレビューを必須とする